// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                          String          @id @default(auto()) @map("_id") @db.ObjectId
  name                        String?
  email                       String?         @unique
  emailVerified               DateTime?
  image                       String?
  password                    String?
  role                        UserRole @default(USER)
  accounts                    Account[]
  isTwoFactorAuthEnabled      Boolean  @default(false)
  twoFactorAuthConfirmation   TwoFactorAuthConfirmation?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String  
  token             String  @unique
  expires           DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String  
  token             String  @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorAuthToken {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String  
  token             String  @unique
  expires           DateTime

  @@unique([email, token])
}

model TwoFactorAuthConfirmation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}